{"version":3,"sources":["entity/EjectedMass.ts"],"names":["EjectedMass","EjectedMass.constructor","EjectedMass.getSize","EjectedMass.getSquareSize","EjectedMass.sendUpdate","EjectedMass.onRemove","EjectedMass.onConsume","EjectedMass.onAutoMove","EjectedMass.moveDone"],"mappings":";;;;;;;;;;;;;;;;qBAAiB,QAAQ;;;;IAEzB,WAAA;cAAA,WAAA;;AAIEA,aAJF,WAAA,CAIcA,MAAMA,EAAEA,KAAKA,EAAEA,QAAQA,EAAEA,IAAIA,EAAEA,UAAUA,EAAAA;8BAJvD,WAAA;;AAKIC,mCALJ,WAAA,6CAKUA,MAAMA,EAAEA,KAAKA,EAAEA,QAAQA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA;AAgBnDA,YAAAA,CAAAA,QAAQA,GAAGA,YAAAA,EAEV,CAAAA;AAhBCA,YAAIA,CAACA,QAAQA,GAAGA,CAACA,CAACA;AAClBA,YAAIA,CAACA,IAAIA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA;AAElDA,YAAIA,CAACA,UAAUA,GAAGA,AAACA,GAAGA,GAAGA,IAAIA,CAACA,IAAIA,IAAKA,CAACA,CAACA;KAC1CA;;iBAXH,WAAA;;eAaSD,mBAAAA;AACLE,mBAAOA,IAAIA,CAACA,IAAIA,CAACA;SAClBA;;;eAEYF,yBAAAA;AACXG,mBAAOA,IAAIA,CAACA,UAAUA,CAACA;SACxBA;;;eASSH,sBAAAA;AAERI,gBAAIA,IAAIA,CAACA,eAAeA,IAAIA,CAACA,EAAEA;AAC7BA,uBAAOA,KAAKA,CAACA;aACdA;AACDA,mBAAOA,IAAIA,CAACA;SACbA;;;eAEOJ,kBAACA,UAAUA,EAAAA;AAEjBK,gBAAIA,KAAKA,GAAGA,UAAUA,CAACA,YAAYA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA;AAClDA,gBAAIA,KAAKA,IAAIA,CAACA,CAACA,EAAEA;AACfA,0BAAUA,CAACA,YAAYA,CAACA,MAAMA,CAACA,KAAKA,EAACA,CAACA,CAACA,CAACA;aACzCA;SACFA;;;eAEQL,mBAACA,QAAQA,EAACA,UAAUA,EAAAA;AAE3BM,oBAAQA,CAACA,OAAOA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;SAC7BA;;;eAESN,oBAACA,UAAUA,EAAAA;AACnBO,gBAAIA,UAAUA,CAACA,UAAUA,CAACA,MAAMA,GAAGA,UAAUA,CAACA,MAAMA,CAACA,cAAcA,EAAEA;AAEnEA,oBAAIA,CAACA,GAAGA,UAAUA,CAACA,eAAeA,CAACA,IAAIA,CAACA,CAACA;AACzCA,oBAAIA,CAACA,EAAEA;AACLA,qBAACA,CAACA,IAAIA,CAACA,IAAIA,EAACA,UAAUA,CAACA,CAACA;AACxBA,2BAAOA,IAAIA,CAACA;iBACbA;aACFA;SACFA;;;eAEOP,kBAACA,UAAUA,EAAAA;AACjBQ,gBAAIA,CAACA,IAAIA,CAACA,UAAUA,CAACA,UAAUA,CAACA,EAAEA;AAChCA,0BAAUA,CAACA,YAAYA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;aACpCA;SACFA;;;WAhEH,WAAA;;;qBAAA,WAAA","file":"entity/EjectedMass.js","sourcesContent":["import Cell from './Cell';\n\nexport default class EjectedMass extends Cell {\n  size: number;\n  squareSize: number;\n\n  constructor(nodeId, owner, position, mass, gameServer){\n    super(nodeId, owner, position, mass, gameServer);\n\n    this.cellType = 3;\n    this.size = Math.ceil(Math.sqrt(100 * this.mass));\n    // not being decayed -> calculate one time\n    this.squareSize = (100 * this.mass) >> 0;\n  }\n\n  getSize() {\n    return this.size;\n  }\n\n  getSquareSize () {\n    return this.squareSize;\n  }\n\n  calcMove = function(){\n    //no-op\n  }\n\n\n  // Main Functions\n\n  sendUpdate() {\n    // Whether or not to include this cell in the update packet\n    if (this.moveEngineTicks == 0) {\n      return false;\n    }\n    return true;\n  }\n\n  onRemove(gameServer) {\n    // Remove from list of ejected mass\n    var index = gameServer.nodesEjected.indexOf(this);\n    if (index != -1) {\n      gameServer.nodesEjected.splice(index,1);\n    }\n  }\n\n  onConsume(consumer,gameServer) {\n    // Adds mass to consumer\n    consumer.addMass(this.mass);\n  }\n\n  onAutoMove(gameServer) {\n    if (gameServer.nodesVirus.length < gameServer.config.virusMaxAmount) {\n      // Check for viruses\n      var v = gameServer.getNearestVirus(this);\n      if (v) { // Feeds the virus if it exists\n        v.feed(this,gameServer);\n        return true;\n      }\n    }\n  }\n\n  moveDone(gameServer) {\n    if (!this.onAutoMove(gameServer)) {\n      gameServer.nodesEjected.push(this);\n    }\n  }\n\n}\n"],"sourceRoot":"/source/"}