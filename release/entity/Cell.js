"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cell = (function () {
    function Cell(nodeId, owner, position, mass, gameServer) {
        _classCallCheck(this, Cell);

        this.nodeId = nodeId;
        this.owner = owner;
        this.color = { r: 0, g: 255, b: 0 };
        this.position = position;
        this.mass = mass;
        this.cellType = -1;
        this.spiked = 0;
        this.killedBy;
        this.gameServer = gameServer;
        this.moveEngineTicks = 0;
        this.moveEngineSpeed = 0;
        this.moveDecay = .75;
        this.angle = 0;
    }

    _createClass(Cell, [{
        key: "getName",
        value: function getName() {
            if (this.owner) {
                return this.owner.name;
            } else {
                return "";
            }
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            this.color.r = color.r;
            this.color.b = color.b;
            this.color.g = color.g;
        }
    }, {
        key: "getColor",
        value: function getColor() {
            return this.color;
        }
    }, {
        key: "getType",
        value: function getType() {
            return this.cellType;
        }
    }, {
        key: "getSize",
        value: function getSize() {
            return Math.ceil(Math.sqrt(100 * this.mass));
        }
    }, {
        key: "getSquareSize",
        value: function getSquareSize() {
            return 100 * this.mass >> 0;
        }
    }, {
        key: "addMass",
        value: function addMass(n) {
            if (this.mass + n > this.owner.gameServer.config.playerMaxMass && this.owner.cells.length < this.owner.gameServer.config.playerMaxCells) {
                this.mass = (this.mass + n) / 2;
                this.owner.gameServer.newCellVirused(this.owner, this, 0, this.mass, 150);
            } else {
                this.mass = Math.min(this.mass + n, this.owner.gameServer.config.playerMaxMass);
            }
        }
    }, {
        key: "getSpeed",
        value: function getSpeed() {
            return 30 * Math.pow(this.mass, -1.0 / 4.5) * 50 / 40;
        }
    }, {
        key: "setAngle",
        value: function setAngle(radians) {
            this.angle = radians;
        }
    }, {
        key: "getAngle",
        value: function getAngle() {
            return this.angle;
        }
    }, {
        key: "setMoveEngineData",
        value: function setMoveEngineData(speed, ticks, decay) {
            this.moveEngineSpeed = speed;
            this.moveEngineTicks = ticks;
            this.moveDecay = isNaN(decay) ? 0.75 : decay;
        }
    }, {
        key: "getEatingRange",
        value: function getEatingRange() {
            return 0;
        }
    }, {
        key: "getKiller",
        value: function getKiller() {
            return this.killedBy;
        }
    }, {
        key: "setKiller",
        value: function setKiller(cell) {
            this.killedBy = cell;
        }
    }, {
        key: "collisionCheck",
        value: function collisionCheck(bottomY, topY, rightX, leftX) {
            if (this.position.y > bottomY) {
                return false;
            }
            if (this.position.y < topY) {
                return false;
            }
            if (this.position.x > rightX) {
                return false;
            }
            if (this.position.x < leftX) {
                return false;
            }
            return true;
        }
    }, {
        key: "collisionCheck2",
        value: function collisionCheck2(objectSquareSize, objectPosition) {
            // IF (O1O2 + r <= R) THEN collided. (O1O2: distance b/w 2 centers of cells)
            // (O1O2 + r)^2 <= R^2
            // approximately, remove 2*O1O2*r because it requires sqrt(): O1O2^2 + r^2 <= R^2
            var dx = this.position.x - objectPosition.x;
            var dy = this.position.y - objectPosition.y;
            return dx * dx + dy * dy + this.getSquareSize() <= objectSquareSize;
        }
    }, {
        key: "visibleCheck",
        value: function visibleCheck(box, centerPos) {
            return this.collisionCheck(box.bottomY, box.topY, box.rightX, box.leftX);
        }
    }, {
        key: "calcMovePhys",
        value: function calcMovePhys(config) {
            var X = this.position.x + this.moveEngineSpeed * Math.sin(this.angle);
            var Y = this.position.y + this.moveEngineSpeed * Math.cos(this.angle);
            this.moveEngineSpeed *= this.moveDecay;
            this.moveEngineTicks--;
            var radius = 40;
            if (this.position.x - radius < config.borderLeft) {
                this.angle = 6.28 - this.angle;
                X = config.borderLeft + radius;
            }
            if (this.position.x + radius > config.borderRight) {
                this.angle = 6.28 - this.angle;
                X = config.borderRight - radius;
            }
            if (this.position.y - radius < config.borderTop) {
                this.angle = this.angle <= 3.14 ? 3.14 - this.angle : 9.42 - this.angle;
                Y = config.borderTop + radius;
            }
            if (this.position.y + radius > config.borderBottom) {
                this.angle = this.angle <= 3.14 ? 3.14 - this.angle : 9.42 - this.angle;
                Y = config.borderBottom - radius;
            }
            this.position.x = X >> 0;
            this.position.y = Y >> 0;
        }
    }, {
        key: "sendUpdate",
        value: function sendUpdate() {
            return true;
        }
    }, {
        key: "onConsume",
        value: function onConsume(consumer, gameServer) {}
    }, {
        key: "onAdd",
        value: function onAdd(gameServer) {}
    }, {
        key: "onRemove",
        value: function onRemove(gameServer) {}
    }, {
        key: "onAutoMove",
        value: function onAutoMove(gameServer) {}
    }, {
        key: "moveDone",
        value: function moveDone(gameServer) {}
    }]);

    return Cell;
})();

exports["default"] = Cell;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;base64,