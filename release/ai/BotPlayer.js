'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _PlayerTracker2 = require('../PlayerTracker');

var _PlayerTracker3 = _interopRequireDefault(_PlayerTracker2);

var BotPlayer = (function (_PlayerTracker) {
    _inherits(BotPlayer, _PlayerTracker);

    function BotPlayer(gameServer, socket) {
        _classCallCheck(this, BotPlayer);

        _get(Object.getPrototypeOf(BotPlayer.prototype), 'constructor', this).call(this, gameServer, socket);
        this.gameState = 0;
        this.path = [];
        this.predators = [];
        this.threats = [];
        this.prey = [];
        this.food = [];
        this.foodImportant = [];
        this.virus = [];
        this.juke = false;
        this.target;
        this.targetVirus;
        this.ejectMass = 0;
        this.oldPos = { x: 0, y: 0 };
    }

    _createClass(BotPlayer, [{
        key: 'getLowestCell',
        value: function getLowestCell() {
            if (this.cells.length <= 0) {
                return null;
            }
            var lowest = this.cells[0];
            for (var i = 1; i < this.cells.length; i++) {
                if (lowest.mass > this.cells[i].mass) {
                    lowest = this.cells[i];
                }
            }
            return lowest;
        }
    }, {
        key: 'updateSightRange',
        value: function updateSightRange() {
            var range = 1000;
            if (this.cells[0]) {
                range += this.cells[0].getSize() * 2.5;
            }
            this.sightRangeX = range;
            this.sightRangeY = range;
        }
    }, {
        key: 'update',
        value: function update() {
            for (var i = 0; i < this.nodeDestroyQueue.length; i++) {
                var index = this.visibleNodes.indexOf(this.nodeDestroyQueue[i]);
                if (index > -1) {
                    this.visibleNodes.splice(index, 1);
                }
            }
            if (this.tickViewBox <= 0 && this.gameServer.run) {
                this.visibleNodes = this.calcViewBox();
                this.tickViewBox = 10;
            } else {
                this.tickViewBox--;
                return;
            }
            if (this.cells.length <= 0) {
                this.gameServer.gameMode.onPlayerSpawn(this.gameServer, this);
                if (this.cells.length == 0) {
                    this.socket.close();
                    return;
                }
            }
            var cell = this.getLowestCell();
            var r = cell.getSize();
            this.clearLists();
            var ignoreMass = Math.min(cell.mass / 10, 150);
            for (var _i in this.visibleNodes) {
                var check = this.visibleNodes[_i];
                if (!check || cell.owner == check.owner) {
                    continue;
                }
                var t = check.getType();
                switch (t) {
                    case 0:
                        if (this.gameServer.gameMode.haveTeams) {
                            if (check.owner.team == this.team) {
                                continue;
                            }
                        }
                        if (cell.mass > check.mass * 1.25) {
                            this.prey.push(check);
                        } else if (check.mass > cell.mass * 1.25) {
                            var dist = this.getDist(cell, check) - (r + check.getSize());
                            if (dist < 300) {
                                this.predators.push(check);
                                if (this.cells.length == 1 && dist < 0) {
                                    this.juke = true;
                                }
                            }
                            this.threats.push(check);
                        } else {
                            this.threats.push(check);
                        }
                        break;
                    case 1:
                        this.food.push(check);
                        break;
                    case 2:
                        this.virus.push(check);
                        break;
                    case 3:
                        if (cell.mass > 20) {
                            this.food.push(check);
                        }
                        break;
                    default:
                        break;
                }
            }
            var newState = this.getState(cell);
            if (newState != this.gameState && newState != 4) {
                this.target = null;
            }
            this.gameState = newState;
            this.decide(cell);
            this.nodeDestroyQueue = [];
        }
    }, {
        key: 'clearLists',
        value: function clearLists() {
            this.predators = [];
            this.threats = [];
            this.prey = [];
            this.food = [];
            this.virus = [];
            this.juke = false;
        }
    }, {
        key: 'getState',
        value: function getState(cell) {
            if (this.gameState == 4) {
                return 4;
            }
            if (this.predators.length <= 0) {
                if (this.prey.length > 0) {
                    return 3;
                } else if (this.food.length > 0) {
                    return 1;
                }
            } else if (this.threats.length > 0) {
                if (this.cells.length == 1 && cell.mass > 180) {
                    var t = this.getBiggest(this.threats);
                    var tl = this.findNearbyVirus(t, 500, this.virus);
                    if (tl != false) {
                        this.target = t;
                        this.targetVirus = tl;
                        return 4;
                    }
                } else {
                    return 2;
                }
            }
            return 0;
        }
    }, {
        key: 'decide',
        value: function decide(cell) {
            switch (this.gameState) {
                case 0:
                    if (this.centerPos.x == this.mouse.x && this.centerPos.y == this.mouse.y) {
                        var index = Math.floor(Math.random() * this.gameServer.nodes.length);
                        var randomNode = this.gameServer.nodes[index];
                        var pos = { x: 0, y: 0 };
                        if (randomNode.getType() == 3 || randomNode.getType() == 1) {
                            pos.x = randomNode.position.x;
                            pos.y = randomNode.position.y;
                        } else {
                            pos = this.gameServer.getRandomPosition();
                        }
                        this.mouse = { x: pos.x, y: pos.y };
                    }
                    break;
                case 1:
                    if (!this.target || this.visibleNodes.indexOf(this.target) == -1) {
                        this.target = this.findNearest(cell, this.food);
                        this.mouse = { x: this.target.position.x, y: this.target.position.y };
                    }
                    break;
                case 2:
                    var avoid = this.combineVectors(this.predators);
                    var deltaY = avoid.y - cell.position.y;
                    var deltaX = avoid.x - cell.position.x;
                    var angle = Math.atan2(deltaX, deltaY);
                    if (angle > Math.PI) {
                        angle -= Math.PI;
                    } else {
                        angle += Math.PI;
                    }
                    var x1 = cell.position.x + 500 * Math.sin(angle);
                    var y1 = cell.position.y + 500 * Math.cos(angle);
                    this.mouse = { x: x1, y: y1 };
                    if (cell.mass < 250) {
                        cell.mass += 1;
                    }
                    if (this.juke) {
                        this.gameServer.splitCells(this);
                    }
                    break;
                case 3:
                    if (!this.target || cell.mass < this.target.mass * 1.25 || this.visibleNodes.indexOf(this.target) == -1) {
                        this.target = this.getRandom(this.prey);
                    }
                    this.mouse = { x: this.target.position.x, y: this.target.position.y };
                    var massReq = 1.25 * (this.target.mass * 2);
                    if (cell.mass > massReq && this.cells.length == 1) {
                        var splitDist = 4 * (cell.getSpeed() * 5) + cell.getSize() * 1.75;
                        var distToTarget = this.getAccDist(cell, this.target);
                        if (splitDist >= distToTarget) {
                            if (this.threats.length > 0 && this.getBiggest(this.threats).mass > 1.25 * (cell.mass / 2)) {
                                break;
                            }
                            this.gameServer.splitCells(this);
                        }
                    }
                    break;
                case 4:
                    if (!this.target || !this.targetVirus || this.cells.length !== 1 || this.visibleNodes.indexOf(this.target) == -1 || this.visibleNodes.indexOf(this.targetVirus) == -1) {
                        this.gameState = 0;
                        this.target = null;
                        break;
                    }
                    var dist = this.getDist(this.targetVirus, this.target) - (this.target.getSize() + 100);
                    if (dist > 500) {
                        this.gameState = 0;
                        this.target = null;
                        break;
                    }
                    var angle = this.getAngle(this.target, this.targetVirus);
                    var reversed = this.reverseAngle(angle);
                    var ourAngle = this.getAngle(cell, this.targetVirus);
                    if (ourAngle <= reversed + .25 && ourAngle >= reversed - .25) {
                        this.mouse = { x: this.targetVirus.position.x, y: this.targetVirus.position.y };
                        for (var v = 0; v < 7; v++) {
                            this.gameServer.ejectMass(this);
                        }
                        this.mouse = { x: cell.position.x, y: cell.position.y };
                        this.gameState = 0;
                        this.target = null;
                    } else {
                        var _r = cell.getSize();
                        var _x1 = this.targetVirus.position.x + (350 + _r) * Math.sin(reversed);
                        var _y1 = this.targetVirus.position.y + (350 + _r) * Math.cos(reversed);
                        this.mouse = { x: _x1, y: _y1 };
                    }
                    break;
                default:
                    this.gameState = 0;
                    break;
            }
            if (this.cells.length > 1) {
                var r = 0;
                for (var i in this.cells) {
                    if (this.cells[i].recombineTicks == 0) {
                        r++;
                    }
                }
                if (r >= 2) {
                    this.mouse.x = this.centerPos.x;
                    this.mouse.y = this.centerPos.y;
                }
            }
        }
    }, {
        key: 'findNearest',
        value: function findNearest(cell, list) {
            /* TODO figure out what this.currentTarget is supposed to be and where it
             * is supposed to be set
            if (this.currentTarget) {
              // Do not check for food if target already exists
              return null;
            }
            */
            var shortest = list[0];
            var shortestDist = this.getDist(cell, shortest);
            for (var i = 1; i < list.length; i++) {
                var check = list[i];
                var dist = this.getDist(cell, check);
                if (shortestDist > dist) {
                    shortest = check;
                    shortestDist = dist;
                }
            }
            return shortest;
        }
    }, {
        key: 'getRandom',
        value: function getRandom(list) {
            var n = Math.floor(Math.random() * list.length);
            return list[n];
        }
    }, {
        key: 'combineVectors',
        value: function combineVectors(list) {
            var pos = { x: 0, y: 0 };
            var check;
            for (var i = 0; i < list.length; i++) {
                check = list[i];
                pos.x += check.position.x;
                pos.y += check.position.y;
            }
            pos.x = pos.x / list.length;
            pos.y = pos.y / list.length;
            return pos;
        }
    }, {
        key: 'getBiggest',
        value: function getBiggest(list) {
            var biggest = list[0];
            for (var i = 1; i < list.length; i++) {
                var check = list[i];
                if (check.mass > biggest.mass) {
                    biggest = check;
                }
            }
            return biggest;
        }
    }, {
        key: 'findNearbyVirus',
        value: function findNearbyVirus(cell, checkDist, list) {
            var r = cell.getSize() + 100;
            for (var i = 0; i < list.length; i++) {
                var check = list[i];
                var dist = this.getDist(cell, check) - r;
                if (checkDist > dist) {
                    return check;
                }
            }
            return false;
        }
    }, {
        key: 'getDist',
        value: function getDist(cell, check) {
            var xd = check.position.x - cell.position.x;
            xd = xd < 0 ? xd * -1 : xd;
            var yd = check.position.y - cell.position.y;
            yd = yd < 0 ? yd * -1 : yd;
            return xd + yd;
        }
    }, {
        key: 'getAccDist',
        value: function getAccDist(cell, check) {
            var xs = check.position.x - cell.position.x;
            xs = xs * xs;
            var ys = check.position.y - cell.position.y;
            ys = ys * ys;
            return Math.sqrt(xs + ys);
        }
    }, {
        key: 'getAngle',
        value: function getAngle(c1, c2) {
            var deltaY = c1.position.y - c2.position.y;
            var deltaX = c1.position.x - c2.position.x;
            return Math.atan2(deltaX, deltaY);
        }
    }, {
        key: 'reverseAngle',
        value: function reverseAngle(angle) {
            if (angle > Math.PI) {
                angle -= Math.PI;
            } else {
                angle += Math.PI;
            }
            return angle;
        }
    }]);

    return BotPlayer;
})(_PlayerTracker3['default']);

exports['default'] = BotPlayer;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,