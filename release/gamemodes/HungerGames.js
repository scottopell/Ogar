'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Tournament2 = require('./Tournament');

var _Tournament3 = _interopRequireDefault(_Tournament2);

var _entityIndex = require('../entity/index');

var HungerGames = (function (_Tournament) {
    _inherits(HungerGames, _Tournament);

    function HungerGames() {
        _classCallCheck(this, HungerGames);

        _get(Object.getPrototypeOf(HungerGames.prototype), 'constructor', this).call(this);
        this.ID = 11;
        this.name = "Hunger Games";
        this.maxContenders = 12;
        this.baseSpawnPoints = [{ x: 1600, y: 200 }, { x: 3200, y: 200 }, { x: 4800, y: 200 }, { x: 200, y: 1600 }, { x: 200, y: 3200 }, { x: 200, y: 4800 }, { x: 6200, y: 1600 }, { x: 6200, y: 3200 }, { x: 6200, y: 4800 }, { x: 1600, y: 6200 }, { x: 3200, y: 6200 }, { x: 4800, y: 6200 }];
        this.contenderSpawnPoints;
        this.borderDec = 100;
    }

    _createClass(HungerGames, [{
        key: 'getPos',
        value: function getPos() {
            var pos = { x: 0, y: 0 };
            if (this.contenderSpawnPoints.length > 0) {
                var index = Math.floor(Math.random() * this.contenderSpawnPoints.length);
                pos = this.contenderSpawnPoints[index];
                this.contenderSpawnPoints.splice(index, 1);
            }
            return { x: pos.x, y: pos.y };
        }
    }, {
        key: 'spawnFood',
        value: function spawnFood(gameServer, mass, pos) {
            var f = new _entityIndex.Food(gameServer.getNextNodeId(), null, pos, mass, null);
            f.setColor(gameServer.getRandomColor());
            gameServer.addNode(f);
            gameServer.currentFood++;
        }
    }, {
        key: 'spawnVirus',
        value: function spawnVirus(gameServer, pos) {
            var v = new _entityIndex.Virus(gameServer.getNextNodeId(), null, pos, gameServer.config.virusStartMass, null);
            gameServer.addNode(v);
        }
    }, {
        key: 'onPlayerDeath',
        value: function onPlayerDeath(gameServer) {
            var config = gameServer.config;
            config.borderLeft += this.borderDec;
            config.borderRight -= this.borderDec;
            config.borderTop += this.borderDec;
            config.borderBottom -= this.borderDec;
            var len = gameServer.nodes.length;
            for (var i = 0; i < len; i++) {
                var node = gameServer.nodes[i];
                if (!node || node.getType() == 0) {
                    continue;
                }
                if (node.position.x < config.borderLeft) {
                    gameServer.removeNode(node);
                    i--;
                } else if (node.position.x > config.borderRight) {
                    gameServer.removeNode(node);
                    i--;
                } else if (node.position.y < config.borderTop) {
                    gameServer.removeNode(node);
                    i--;
                } else if (node.position.y > config.borderBottom) {
                    gameServer.removeNode(node);
                    i--;
                }
            }
        }
    }, {
        key: 'onServerInit',
        value: function onServerInit(gameServer) {
            this.prepare(gameServer);
            this.contenderSpawnPoints = this.baseSpawnPoints.slice();
            if (gameServer.config.serverBots > this.maxContenders) {
                gameServer.config.serverBots = this.maxContenders;
            }
            gameServer.config.spawnInterval = 20;
            gameServer.config.borderLeft = 0;
            gameServer.config.borderRight = 6400;
            gameServer.config.borderTop = 0;
            gameServer.config.borderBottom = 6400;
            gameServer.config.foodSpawnAmount = 5;
            gameServer.config.foodStartAmount = 100;
            gameServer.config.foodMaxAmount = 200;
            gameServer.config.foodMass = 2;
            gameServer.config.virusMinAmount = 10;
            gameServer.config.virusMaxAmount = 100;
            gameServer.config.ejectSpawnPlayer = 0;
            gameServer.config.playerDisconnectTime = 10;
            var mapWidth = gameServer.config.borderRight - gameServer.config.borderLeft;
            var mapHeight = gameServer.config.borderBottom - gameServer.config.borderTop;
            this.spawnFood(gameServer, 200, { x: mapWidth * .5, y: mapHeight * .5 });
            this.spawnFood(gameServer, 80, { x: mapWidth * .4, y: mapHeight * .6 });
            this.spawnFood(gameServer, 80, { x: mapWidth * .6, y: mapHeight * .6 });
            this.spawnFood(gameServer, 80, { x: mapWidth * .4, y: mapHeight * .4 });
            this.spawnFood(gameServer, 80, { x: mapWidth * .6, y: mapHeight * .4 });
            this.spawnFood(gameServer, 50, { x: mapWidth * .7, y: mapHeight * .5 });
            this.spawnFood(gameServer, 50, { x: mapWidth * .3, y: mapHeight * .5 });
            this.spawnFood(gameServer, 50, { x: mapWidth * .5, y: mapHeight * .7 });
            this.spawnFood(gameServer, 50, { x: mapWidth * .5, y: mapHeight * .3 });
            this.spawnFood(gameServer, 30, { x: mapWidth * .7, y: mapHeight * .625 });
            this.spawnFood(gameServer, 30, { x: mapWidth * .625, y: mapHeight * .7 });
            this.spawnFood(gameServer, 30, { x: mapWidth * .3, y: mapHeight * .4 });
            this.spawnFood(gameServer, 30, { x: mapWidth * .4, y: mapHeight * .3 });
            this.spawnFood(gameServer, 30, { x: mapWidth * .6, y: mapHeight * .3 });
            this.spawnFood(gameServer, 30, { x: mapWidth * .7, y: mapHeight * .4 });
            this.spawnFood(gameServer, 30, { x: mapWidth * .3, y: mapHeight * .6 });
            this.spawnFood(gameServer, 30, { x: mapWidth * .4, y: mapHeight * .7 });
            this.spawnVirus(gameServer, { x: mapWidth * .6, y: mapHeight * .5 });
            this.spawnVirus(gameServer, { x: mapWidth * .4, y: mapHeight * .5 });
            this.spawnVirus(gameServer, { x: mapWidth * .5, y: mapHeight * .4 });
            this.spawnVirus(gameServer, { x: mapWidth * .5, y: mapHeight * .6 });
            this.spawnVirus(gameServer, { x: mapWidth * .3, y: mapHeight * .3 });
            this.spawnVirus(gameServer, { x: mapWidth * .3, y: mapHeight * .7 });
            this.spawnVirus(gameServer, { x: mapWidth * .7, y: mapHeight * .3 });
            this.spawnVirus(gameServer, { x: mapWidth * .7, y: mapHeight * .7 });
            this.spawnVirus(gameServer, { x: mapWidth * .25, y: mapHeight * .6 });
            this.spawnVirus(gameServer, { x: mapWidth * .25, y: mapHeight * .4 });
            this.spawnVirus(gameServer, { x: mapWidth * .75, y: mapHeight * .6 });
            this.spawnVirus(gameServer, { x: mapWidth * .75, y: mapHeight * .4 });
            this.spawnVirus(gameServer, { x: mapWidth * .6, y: mapHeight * .25 });
            this.spawnVirus(gameServer, { x: mapWidth * .4, y: mapHeight * .25 });
            this.spawnVirus(gameServer, { x: mapWidth * .6, y: mapHeight * .75 });
            this.spawnVirus(gameServer, { x: mapWidth * .4, y: mapHeight * .75 });
        }
    }, {
        key: 'onPlayerSpawn',
        value: function onPlayerSpawn(gameServer, player) {
            if (this.gamePhase == 0 && this.contenders.length < this.maxContenders) {
                player.color = gameServer.getRandomColor();
                this.contenders.push(player);
                gameServer.spawnPlayer(player, this.getPos());
                if (this.contenders.length == this.maxContenders) {
                    this.startGamePrep(gameServer);
                }
            }
        }
    }]);

    return HungerGames;
})(_Tournament3['default']);

exports['default'] = HungerGames;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhbWVtb2Rlcy9IdW5nZXJHYW1lcy50cyJdLCJuYW1lcyI6WyJIdW5nZXJHYW1lcyIsIkh1bmdlckdhbWVzLmNvbnN0cnVjdG9yIiwiSHVuZ2VyR2FtZXMuZ2V0UG9zIiwiSHVuZ2VyR2FtZXMuc3Bhd25Gb29kIiwiSHVuZ2VyR2FtZXMuc3Bhd25WaXJ1cyIsIkh1bmdlckdhbWVzLm9uUGxheWVyRGVhdGgiLCJIdW5nZXJHYW1lcy5vblNlcnZlckluaXQiLCJIdW5nZXJHYW1lcy5vblBsYXllclNwYXduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OzJCQUF1QixjQUFjOzs7OzJCQUNYLGlCQUFpQjs7SUFFM0MsV0FBQTtjQUFBLFdBQUE7O0FBTUVBLGFBTkYsV0FBQSxHQU1FQTs4QkFORixXQUFBOztBQU9JQyxtQ0FQSixXQUFBLDZDQU9ZQTtBQUNSQSxZQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQTtBQUNiQSxZQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxjQUFjQSxDQUFDQTtBQUczQkEsWUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsRUFBRUEsQ0FBQ0E7QUFDeEJBLFlBQUlBLENBQUNBLGVBQWVBLEdBQUdBLENBQ3ZCQSxFQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxFQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFDQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxFQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFDQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxFQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFDQSxFQUNsREEsRUFBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsRUFBQ0EsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsRUFBQ0EsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBQ0EsQ0FBQ0EsRUFBRUEs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Q0FBQ0EsQ0FBQ0E7QUFDbkVBLGdCQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFVQSxFQUFDQSxFQUFFQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxDQUFDQTtBQUNuRUEsZ0JBQUlBLENBQUNBLFNBQVNBLENBQUNBLFVBQVVBLEVBQUNBLEVBQUVBLEVBQUNBLEVBQUNBLENBQUNBLEVBQUVBLFFBQVFBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLEVBQUVBLFNBQVNBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLENBQUNBO0FBQ25FQSxnQkFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsVUFBVUEsRUFBQ0EsRUFBRUEsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsRUFBRUEsU0FBU0EsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDbkVBLGdCQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFVQSxFQUFDQSxFQUFFQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxDQUFDQTtBQUNuRUEsZ0JBQUlBLENBQUNBLFNBQVNBLENBQUNBLFVBQVVBLEVBQUNBLEVBQUVBLEVBQUNBLEVBQUNBLENBQUNBLEVBQUVBLFFBQVFBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLEVBQUVBLFNBQVNBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLENBQUNBO0FBQ25FQSxnQkFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsVUFBVUEsRUFBQ0EsRUFBRUEsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsRUFBRUEsU0FBU0EsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDbkVBLGdCQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFVQSxFQUFDQSxFQUFFQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxHQUFHQSxJQUFJQSxFQUFDQSxDQUFDQSxDQUFDQTtBQUNyRUEsZ0JBQUlBLENBQUNBLFNBQVNBLENBQUNBLFVBQVVBLEVBQUNBLEVBQUVBLEVBQUNBLEVBQUNBLENBQUNBLEVBQUVBLFFBQVFBLEdBQUdBLElBQUlBLEVBQUNBLENBQUNBLEVBQUVBLFNBQVNBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLENBQUNBO0FBQ3JFQSxnQkFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsVUFBVUEsRUFBQ0EsRUFBRUEsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsRUFBRUEsU0FBU0EsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDbkVBLGdCQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFVQSxFQUFDQSxFQUFFQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxDQUFDQTtBQUNuRUEsZ0JBQUlBLENBQUNBLFNBQVNBLENBQUNBLFVBQVVBLEVBQUNBLEVBQUVBLEVBQUNBLEVBQUNBLENBQUNBLEVBQUVBLFFBQVFBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLEVBQUVBLFNBQVNBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLENBQUNBO0FBQ25FQSxnQkFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsVUFBVUEsRUFBQ0EsRUFBRUEsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsRUFBRUEsU0FBU0EsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDbkVBLGdCQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFVQSxFQUFDQSxFQUFFQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxDQUFDQTtBQUNuRUEsZ0JBQUlBLENBQUNBLFNBQVNBLENBQUNBLFVBQVVBLEVBQUNBLEVBQUVBLEVBQUNBLEVBQUNBLENBQUNBLEVBQUVBLFFBQVFBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLEVBQUVBLFNBQVNBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLENBQUNBO0FBR25FQSxnQkFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBVUEsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsRUFBRUEsU0FBU0EsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDakVBLGdCQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFVQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxDQUFDQTtBQUNqRUEsZ0JBQUlBLENBQUNBLFVBQVVBLENBQUNBLFVBQVVBLEVBQUNBLEVBQUNBLENBQUNBLEVBQUVBLFFBQVFBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLEVBQUVBLFNBQVNBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLENBQUNBO0FBQ2pFQSxnQkFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBVUEsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsRUFBRUEsU0FBU0EsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDakVBLGdCQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFVQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxDQUFDQTtBQUNqRUEsZ0JBQUlBLENBQUNBLFVBQVVBLENBQUNBLFVBQVVBLEVBQUNBLEVBQUNBLENBQUNBLEVBQUVBLFFBQVFBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLEVBQUVBLFNBQVNBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLENBQUNBO0FBQ2pFQSxnQkFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBVUEsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsRUFBRUEsU0FBU0EsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDakVBLGdCQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFVQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxDQUFDQTtBQUNqRUEsZ0JBQUlBLENBQUNBLFVBQVVBLENBQUNBLFVBQVVBLEVBQUNBLEVBQUNBLENBQUNBLEVBQUVBLFFBQVFBLEdBQUdBLEdBQUdBLEVBQUNBLENBQUNBLEVBQUVBLFNBQVNBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLENBQUNBO0FBQ2xFQSxnQkFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBVUEsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsR0FBR0EsR0FBR0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsU0FBU0EsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDbEVBLGdCQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFVQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxHQUFHQSxHQUFHQSxFQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxDQUFDQTtBQUNsRUEsZ0JBQUlBLENBQUNBLFVBQVVBLENBQUNBLFVBQVVBLEVBQUNBLEVBQUNBLENBQUNBLEVBQUVBLFFBQVFBLEdBQUdBLEdBQUdBLEVBQUNBLENBQUNBLEVBQUVBLFNBQVNBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLENBQUNBO0FBQ2xFQSxnQkFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBVUEsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsRUFBRUEsU0FBU0EsR0FBR0EsR0FBR0EsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDbEVBLGdCQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFVQSxFQUFDQSxFQUFDQSxDQUFDQSxFQUFFQSxRQUFRQSxHQUFHQSxFQUFFQSxFQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxHQUFHQSxHQUFHQSxFQUFDQSxDQUFDQSxDQUFDQTtBQUNsRUEsZ0JBQUlBLENBQUNBLFVBQVVBLENBQUNBLFVBQVVBLEVBQUNBLEVBQUNBLENBQUNBLEVBQUVBLFFBQVFBLEdBQUdBLEVBQUVBLEVBQUNBLENBQUNBLEVBQUVBLFNBQVNBLEdBQUdBLEdBQUdBLEVBQUNBLENBQUNBLENBQUNBO0FBQ2xFQSxnQkFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBVUEsRUFBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsUUFBUUEsR0FBR0EsRUFBRUEsRUFBQ0EsQ0FBQ0EsRUFBRUEsU0FBU0EsR0FBR0EsR0FBR0EsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7U0FDbkVBOzs7ZUFFWU4sdUJBQUNBLFVBQVVBLEVBQUNBLE1BQU1BLEVBQUFBO0FBRTdCTyxnQkFBSUEsQUFBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsSUFBSUEsQ0FBQ0EsSUFBTUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQUFBQ0EsRUFBRUE7QUFDMUVBLHNCQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxVQUFVQSxDQUFDQSxjQUFjQSxFQUFFQSxDQUFDQTtBQUMzQ0Esb0JBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0FBQzdCQSwwQkFBVUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsTUFBTUEsRUFBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7QUFFN0NBLG9CQUFJQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQSxhQUFhQSxFQUFFQTtBQUVoREEsd0JBQUlBLENBQUNBLGFBQWFBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO2lCQUNoQ0E7YUFDRkE7U0FDRkE7OztXQXJLSCxXQUFBOzs7cUJBQUEsV0FBQSIsImZpbGUiOiJnYW1lbW9kZXMvSHVuZ2VyR2FtZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVG91cm5hbWVudCBmcm9tICcuL1RvdXJuYW1lbnQnO1xuaW1wb3J0IHtGb29kLCBWaXJ1c30gZnJvbSAnLi4vZW50aXR5L2luZGV4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSHVuZ2VyR2FtZXMgZXh0ZW5kcyBUb3VybmFtZW50e1xuXG4gIGJhc2VTcGF3blBvaW50czogYW55O1xuICBjb250ZW5kZXJTcGF3blBvaW50czogYW55O1xuICBib3JkZXJEZWM6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5JRCA9IDExO1xuICAgIHRoaXMubmFtZSA9IFwiSHVuZ2VyIEdhbWVzXCI7XG5cbiAgICAvLyBHYW1lbW9kZSBTcGVjaWZpYyBWYXJpYWJsZXNcbiAgICB0aGlzLm1heENvbnRlbmRlcnMgPSAxMjtcbiAgICB0aGlzLmJhc2VTcGF3blBvaW50cyA9IFtcbiAgICB7eDogMTYwMCx5OiAyMDB9LHt4OiAzMjAwLHk6IDIwMH0se3g6IDQ4MDAseTogMjAwfSwgLy8gVG9wXG4gICAge3g6IDIwMCx5OiAxNjAwfSx7eDogMjAwLHk6IDMyMDB9LHt4OiAyMDAseTogNDgwMH0sIC8vIExlZnRcbiAgICB7eDogNjIwMCx5OiAxNjAwfSx7eDogNjIwMCx5OiAzMjAwfSx7eDogNjIwMCx5OiA0ODAwfSwgLy8gUmlnaHRcbiAgICB7eDogMTYwMCx5OiA2MjAwfSx7eDogMzIwMCx5OiA2MjAwfSx7eDogNDgwMCx5OiA2MjAwfSAgLy8gQm90dG9tXG4gICAgXTtcbiAgICB0aGlzLmNvbnRlbmRlclNwYXduUG9pbnRzO1xuICAgIHRoaXMuYm9yZGVyRGVjID0gMTAwOyAvLyBCb3JkZXIgc2hyaW5rcyBieSB0aGlzIHNpemUgZXZlcnl0aW1lIHNvbWVvbmUgZGllc1xuICB9XG5cbiAgLy8gR2FtZW1vZGUgU3BlY2lmaWMgRnVuY3Rpb25zXG5cbiAgZ2V0UG9zKCkge1xuICAgIHZhciBwb3MgPSB7eDogMCwgeTogMH07XG5cbiAgICAvLyBSYW5kb20gUG9zaXRpb25cbiAgICBpZiAodGhpcy5jb250ZW5kZXJTcGF3blBvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmNvbnRlbmRlclNwYXduUG9pbnRzLmxlbmd0aCk7XG4gICAgICBwb3MgPSB0aGlzLmNvbnRlbmRlclNwYXduUG9pbnRzW2luZGV4XTtcbiAgICAgIHRoaXMuY29udGVuZGVyU3Bhd25Qb2ludHMuc3BsaWNlKGluZGV4LDEpO1xuICAgIH1cblxuICAgIHJldHVybiB7eDogcG9zLngsIHk6IHBvcy55fTtcbiAgfVxuXG4gIHNwYXduRm9vZChnYW1lU2VydmVyLG1hc3MscG9zKSB7XG4gICAgdmFyIGYgPSBuZXcgRm9vZChnYW1lU2VydmVyLmdldE5leHROb2RlSWQoKSwgbnVsbCwgcG9zLCBtYXNzLCBudWxsKTtcbiAgICBmLnNldENvbG9yKGdhbWVTZXJ2ZXIuZ2V0UmFuZG9tQ29sb3IoKSk7XG4gICAgZ2FtZVNlcnZlci5hZGROb2RlKGYpO1xuICAgIGdhbWVTZXJ2ZXIuY3VycmVudEZvb2QrKztcbiAgfVxuXG4gIHNwYXduVmlydXMoZ2FtZVNlcnZlcixwb3MpIHtcbiAgICB2YXIgdiA9IG5ldyBWaXJ1cyhnYW1lU2VydmVyLmdldE5leHROb2RlSWQoKSwgbnVsbCwgcG9zLCBnYW1lU2VydmVyLmNvbmZpZy52aXJ1c1N0YXJ0TWFzcywgbnVsbCk7XG4gICAgZ2FtZVNlcnZlci5hZGROb2RlKHYpO1xuICB9XG5cbiAgb25QbGF5ZXJEZWF0aChnYW1lU2VydmVyKSB7XG4gICAgdmFyIGNvbmZpZyA9IGdhbWVTZXJ2ZXIuY29uZmlnO1xuICAgIGNvbmZpZy5ib3JkZXJMZWZ0ICs9IHRoaXMuYm9yZGVyRGVjO1xuICAgIGNvbmZpZy5ib3JkZXJSaWdodCAtPSB0aGlzLmJvcmRlckRlYztcbiAgICBjb25maWcuYm9yZGVyVG9wICs9IHRoaXMuYm9yZGVyRGVjO1xuICAgIGNvbmZpZy5ib3JkZXJCb3R0b20gLT0gdGhpcy5ib3JkZXJEZWM7XG5cbiAgICAvLyBSZW1vdmUgYWxsIGNlbGxzXG4gICAgdmFyIGxlbiA9IGdhbWVTZXJ2ZXIubm9kZXMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBub2RlID0gZ2FtZVNlcnZlci5ub2Rlc1tpXTtcblxuICAgICAgaWYgKCghbm9kZSkgfHwgKG5vZGUuZ2V0VHlwZSgpID09IDApKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBNb3ZlXG4gICAgICBpZiAobm9kZS5wb3NpdGlvbi54IDwgY29uZmlnLmJvcmRlckxlZnQpIHtcbiAgICAgICAgZ2FtZVNlcnZlci5yZW1vdmVOb2RlKG5vZGUpO1xuICAgICAgICBpLS07XG4gICAgICB9IGVsc2UgaWYgKG5vZGUucG9zaXRpb24ueCA+IGNvbmZpZy5ib3JkZXJSaWdodCkge1xuICAgICAgICBnYW1lU2VydmVyLnJlbW92ZU5vZGUobm9kZSk7XG4gICAgICAgIGktLTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5wb3NpdGlvbi55IDwgY29uZmlnLmJvcmRlclRvcCkge1xuICAgICAgICBnYW1lU2VydmVyLnJlbW92ZU5vZGUobm9kZSk7XG4gICAgICAgIGktLTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5wb3NpdGlvbi55ID4gY29uZmlnLmJvcmRlckJvdHRvbSkge1xuICAgICAgICBnYW1lU2VydmVyLnJlbW92ZU5vZGUobm9kZSk7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBPdmVycmlkZVxuXG4gIG9uU2VydmVySW5pdChnYW1lU2VydmVyKSB7XG4gICAgLy8gUHJlcGFyZVxuICAgIHRoaXMucHJlcGFyZShnYW1lU2VydmVyKTtcblxuICAgIC8vIFJlc2V0cyBzcGF3biBwb2ludHNcbiAgICB0aGlzLmNvbnRlbmRlclNwYXduUG9pbnRzID0gdGhpcy5iYXNlU3Bhd25Qb2ludHMuc2xpY2UoKTtcblxuICAgIC8vIE92ZXJyaWRlIGNvbmZpZyB2YWx1ZXNcbiAgICBpZiAoZ2FtZVNlcnZlci5jb25maWcuc2VydmVyQm90cyA+IHRoaXMubWF4Q29udGVuZGVycykge1xuICAgICAgLy8gVGhlIG51bWJlciBvZiBib3RzIGNhbm5vdCBleGNlZWQgdGhlIG1heGltdW0gYW1vdW50IG9mIGNvbnRlbmRlcnNcbiAgICAgIGdhbWVTZXJ2ZXIuY29uZmlnLnNlcnZlckJvdHMgPSB0aGlzLm1heENvbnRlbmRlcnM7XG4gICAgfVxuICAgIGdhbWVTZXJ2ZXIuY29uZmlnLnNwYXduSW50ZXJ2YWwgPSAyMDtcbiAgICBnYW1lU2VydmVyLmNvbmZpZy5ib3JkZXJMZWZ0ID0gMDtcbiAgICBnYW1lU2VydmVyLmNvbmZpZy5ib3JkZXJSaWdodCA9IDY0MDA7XG4gICAgZ2FtZVNlcnZlci5jb25maWcuYm9yZGVyVG9wID0gMDtcbiAgICBnYW1lU2VydmVyLmNvbmZpZy5ib3JkZXJCb3R0b20gPSA2NDAwO1xuICAgIGdhbWVTZXJ2ZXIuY29uZmlnLmZvb2RTcGF3bkFtb3VudCA9IDU7IC8vIFRoaXMgaXMgaHVuZ2VyIGdhbWVzXG4gICAgZ2FtZVNlcnZlci5jb25maWcuZm9vZFN0YXJ0QW1vdW50ID0gMTAwO1xuICAgIGdhbWVTZXJ2ZXIuY29uZmlnLmZvb2RNYXhBbW91bnQgPSAyMDA7XG4gICAgZ2FtZVNlcnZlci5jb25maWcuZm9vZE1hc3MgPSAyOyAvLyBGb29kIGlzIHNjYXJjZSwgYnV0IGl0cyB3b3J0aCBtb3JlXG4gICAgZ2FtZVNlcnZlci5jb25maWcudmlydXNNaW5BbW91bnQgPSAxMDsgLy8gV2UgbmVlZCB0byBzcGF3biBzb21lIHZpcnVzZXMgaW4gY2FzZSBzb21lb25lIGVhdHMgdGhlbSBhbGxcbiAgICBnYW1lU2VydmVyLmNvbmZpZy52aXJ1c01heEFtb3VudCA9IDEwMDtcbiAgICBnYW1lU2VydmVyLmNvbmZpZy5lamVjdFNwYXduUGxheWVyID0gMDtcbiAgICBnYW1lU2VydmVyLmNvbmZpZy5wbGF5ZXJEaXNjb25uZWN0VGltZSA9IDEwOyAvLyBTbyB0aGF0IHBlb3BsZSBkb250IGRpc2Nvbm5lY3QgYW5kIHN0YWxsIHRoZSBnYW1lIGZvciB0b28gbG9uZ1xuXG4gICAgLy8gU3Bhd24gSW5pdGlhbCBWaXJ1cy9MYXJnZSBmb29kXG4gICAgdmFyIG1hcFdpZHRoID0gZ2FtZVNlcnZlci5jb25maWcuYm9yZGVyUmlnaHQgLSBnYW1lU2VydmVyLmNvbmZpZy5ib3JkZXJMZWZ0O1xuICAgIHZhciBtYXBIZWlnaHQgPSBnYW1lU2VydmVyLmNvbmZpZy5ib3JkZXJCb3R0b20gLSBnYW1lU2VydmVyLmNvbmZpZy5ib3JkZXJUb3A7XG5cbiAgICAvLyBGb29kXG4gICAgdGhpcy5zcGF3bkZvb2QoZ2FtZVNlcnZlciwyMDAse3g6IG1hcFdpZHRoICogLjUseTogbWFwSGVpZ2h0ICogLjV9KTsgLy8gQ2VudGVyXG4gICAgdGhpcy5zcGF3bkZvb2QoZ2FtZVNlcnZlciw4MCx7eDogbWFwV2lkdGggKiAuNCx5OiBtYXBIZWlnaHQgKiAuNn0pOyAvL1xuICAgIHRoaXMuc3Bhd25Gb29kKGdhbWVTZXJ2ZXIsODAse3g6IG1hcFdpZHRoICogLjYseTogbWFwSGVpZ2h0ICogLjZ9KTtcbiAgICB0aGlzLnNwYXduRm9vZChnYW1lU2VydmVyLDgwLHt4OiBtYXBXaWR0aCAqIC40LHk6IG1hcEhlaWdodCAqIC40fSk7XG4gICAgdGhpcy5zcGF3bkZvb2QoZ2FtZVNlcnZlciw4MCx7eDogbWFwV2lkdGggKiAuNix5OiBtYXBIZWlnaHQgKiAuNH0pO1xuICAgIHRoaXMuc3Bhd25Gb29kKGdhbWVTZXJ2ZXIsNTAse3g6IG1hcFdpZHRoICogLjcseTogbWFwSGVpZ2h0ICogLjV9KTsgLy9cbiAgICB0aGlzLnNwYXduRm9vZChnYW1lU2VydmVyLDUwLHt4OiBtYXBXaWR0aCAqIC4zLHk6IG1hcEhlaWdodCAqIC41fSk7XG4gICAgdGhpcy5zcGF3bkZvb2QoZ2FtZVNlcnZlciw1MCx7eDogbWFwV2lkdGggKiAuNSx5OiBtYXBIZWlnaHQgKiAuN30pO1xuICAgIHRoaXMuc3Bhd25Gb29kKGdhbWVTZXJ2ZXIsNTAse3g6IG1hcFdpZHRoICogLjUseTogbWFwSGVpZ2h0ICogLjN9KTtcbiAgICB0aGlzLnNwYXduRm9vZChnYW1lU2VydmVyLDMwLHt4OiBtYXBXaWR0aCAqIC43LHk6IG1hcEhlaWdodCAqIC42MjV9KTsgLy8gQ29ybmVyXG4gICAgdGhpcy5zcGF3bkZvb2QoZ2FtZVNlcnZlciwzMCx7eDogbWFwV2lkdGggKiAuNjI1LHk6IG1hcEhlaWdodCAqIC43fSk7XG4gICAgdGhpcy5zcGF3bkZvb2QoZ2FtZVNlcnZlciwzMCx7eDogbWFwV2lkdGggKiAuMyx5OiBtYXBIZWlnaHQgKiAuNH0pO1xuICAgIHRoaXMuc3Bhd25Gb29kKGdhbWVTZXJ2ZXIsMzAse3g6IG1hcFdpZHRoICogLjQseTogbWFwSGVpZ2h0ICogLjN9KTtcbiAgICB0aGlzLnNwYXduRm9vZChnYW1lU2VydmVyLDMwLHt4OiBtYXBXaWR0aCAqIC42LHk6IG1hcEhlaWdodCAqIC4zfSk7XG4gICAgdGhpcy5zcGF3bkZvb2QoZ2FtZVNlcnZlciwzMCx7eDogbWFwV2lkdGggKiAuNyx5OiBtYXBIZWlnaHQgKiAuNH0pO1xuICAgIHRoaXMuc3Bhd25Gb29kKGdhbWVTZXJ2ZXIsMzAse3g6IG1hcFdpZHRoICogLjMseTogbWFwSGVpZ2h0ICogLjZ9KTtcbiAgICB0aGlzLnNwYXduRm9vZChnYW1lU2VydmVyLDMwLHt4OiBtYXBXaWR0aCAqIC40LHk6IG1hcEhlaWdodCAqIC43fSk7XG5cbiAgICAvLyBWaXJ1c1xuICAgIHRoaXMuc3Bhd25WaXJ1cyhnYW1lU2VydmVyLHt4OiBtYXBXaWR0aCAqIC42LHk6IG1hcEhlaWdodCAqIC41fSk7IC8vXG4gICAgdGhpcy5zcGF3blZpcnVzKGdhbWVTZXJ2ZXIse3g6IG1hcFdpZHRoICogLjQseTogbWFwSGVpZ2h0ICogLjV9KTtcbiAgICB0aGlzLnNwYXduVmlydXMoZ2FtZVNlcnZlcix7eDogbWFwV2lkdGggKiAuNSx5OiBtYXBIZWlnaHQgKiAuNH0pO1xuICAgIHRoaXMuc3Bhd25WaXJ1cyhnYW1lU2VydmVyLHt4OiBtYXBXaWR0aCAqIC41LHk6IG1hcEhlaWdodCAqIC42fSk7XG4gICAgdGhpcy5zcGF3blZpcnVzKGdhbWVTZXJ2ZXIse3g6IG1hcFdpZHRoICogLjMseTogbWFwSGVpZ2h0ICogLjN9KTsgLy9cbiAgICB0aGlzLnNwYXduVmlydXMoZ2FtZVNlcnZlcix7eDogbWFwV2lkdGggKiAuMyx5OiBtYXBIZWlnaHQgKiAuN30pO1xuICAgIHRoaXMuc3Bhd25WaXJ1cyhnYW1lU2VydmVyLHt4OiBtYXBXaWR0aCAqIC43LHk6IG1hcEhlaWdodCAqIC4zfSk7XG4gICAgdGhpcy5zcGF3blZpcnVzKGdhbWVTZXJ2ZXIse3g6IG1hcFdpZHRoICogLjcseTogbWFwSGVpZ2h0ICogLjd9KTtcbiAgICB0aGlzLnNwYXduVmlydXMoZ2FtZVNlcnZlcix7eDogbWFwV2lkdGggKiAuMjUseTogbWFwSGVpZ2h0ICogLjZ9KTsgLy9cbiAgICB0aGlzLnNwYXduVmlydXMoZ2FtZVNlcnZlcix7eDogbWFwV2lkdGggKiAuMjUseTogbWFwSGVpZ2h0ICogLjR9KTtcbiAgICB0aGlzLnNwYXduVmlydXMoZ2FtZVNlcnZlcix7eDogbWFwV2lkdGggKiAuNzUseTogbWFwSGVpZ2h0ICogLjZ9KTtcbiAgICB0aGlzLnNwYXduVmlydXMoZ2FtZVNlcnZlcix7eDogbWFwV2lkdGggKiAuNzUseTogbWFwSGVpZ2h0ICogLjR9KTtcbiAgICB0aGlzLnNwYXduVmlydXMoZ2FtZVNlcnZlcix7eDogbWFwV2lkdGggKiAuNix5OiBtYXBIZWlnaHQgKiAuMjV9KTtcbiAgICB0aGlzLnNwYXduVmlydXMoZ2FtZVNlcnZlcix7eDogbWFwV2lkdGggKiAuNCx5OiBtYXBIZWlnaHQgKiAuMjV9KTtcbiAgICB0aGlzLnNwYXduVmlydXMoZ2FtZVNlcnZlcix7eDogbWFwV2lkdGggKiAuNix5OiBtYXBIZWlnaHQgKiAuNzV9KTtcbiAgICB0aGlzLnNwYXduVmlydXMoZ2FtZVNlcnZlcix7eDogbWFwV2lkdGggKiAuNCx5OiBtYXBIZWlnaHQgKiAuNzV9KTtcbiAgfVxuXG4gIG9uUGxheWVyU3Bhd24oZ2FtZVNlcnZlcixwbGF5ZXIpIHtcbiAgICAvLyBPbmx5IHNwYXduIHBsYXllcnMgaWYgdGhlIGdhbWUgaGFzbnQgc3RhcnRlZCB5ZXRcbiAgICBpZiAoKHRoaXMuZ2FtZVBoYXNlID09IDApICYmICh0aGlzLmNvbnRlbmRlcnMubGVuZ3RoIDwgdGhpcy5tYXhDb250ZW5kZXJzKSkge1xuICAgICAgcGxheWVyLmNvbG9yID0gZ2FtZVNlcnZlci5nZXRSYW5kb21Db2xvcigpOyAvLyBSYW5kb20gY29sb3JcbiAgICAgIHRoaXMuY29udGVuZGVycy5wdXNoKHBsYXllcik7IC8vIEFkZCB0byBjb250ZW5kZXJzIGxpc3RcbiAgICAgIGdhbWVTZXJ2ZXIuc3Bhd25QbGF5ZXIocGxheWVyLHRoaXMuZ2V0UG9zKCkpO1xuXG4gICAgICBpZiAodGhpcy5jb250ZW5kZXJzLmxlbmd0aCA9PSB0aGlzLm1heENvbnRlbmRlcnMpIHtcbiAgICAgICAgLy8gU3RhcnQgdGhlIGdhbWUgb25jZSB0aGVyZSBpcyBlbm91Z2ggcGxheWVyc1xuICAgICAgICB0aGlzLnN0YXJ0R2FtZVByZXAoZ2FtZVNlcnZlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9