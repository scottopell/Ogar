'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _FFA2 = require('./FFA');

var _FFA3 = _interopRequireDefault(_FFA2);

var _entityIndex = require('../entity/index');

var VirusFeed = require('../entity/Virus').prototype.feed;

var Experimental = (function (_FFA) {
    _inherits(Experimental, _FFA);

    function Experimental() {
        _classCallCheck(this, Experimental);

        _get(Object.getPrototypeOf(Experimental.prototype), 'constructor', this).call(this);
        this.ID = 2;
        this.name = "Experimental";
        this.specByLeaderboard = true;
        this.nodesMother = [];
        this.tickMother = 0;
        this.tickMotherS = 0;
        this.motherCellMass = 200;
        this.motherUpdateInterval = 5;
        this.motherSpawnInterval = 100;
        this.motherMinAmount = 5;
    }

    _createClass(Experimental, [{
        key: 'updateMotherCells',
        value: function updateMotherCells(gameServer) {
            for (var i in this.nodesMother) {
                var mother = this.nodesMother[i];
                mother.update(gameServer);
                mother.checkEat(gameServer);
            }
        }
    }, {
        key: 'spawnMotherCell',
        value: function spawnMotherCell(gameServer) {
            if (this.nodesMother.length < this.motherMinAmount) {
                var pos = gameServer.getRandomPosition();
                for (var i = 0; i < gameServer.nodesPlayer.length; i++) {
                    var check = gameServer.nodesPlayer[i];
                    var r = check.getSize();
                    var topY = check.position.y - r;
                    var bottomY = check.position.y + r;
                    var leftX = check.position.x - r;
                    var rightX = check.position.x + r;
                    if (pos.y > bottomY) {
                        continue;
                    }
                    if (pos.y < topY) {
                        continue;
                    }
                    if (pos.x > rightX) {
                        continue;
                    }
                    if (pos.x < leftX) {
                        continue;
                    }
                    return;
                }
                var m = new MotherCell(gameServer.getNextNodeId(), null, pos, this.motherCellMass, null);
            }
        }
    }, {
        key: 'onServerInit',
        value: function onServerInit(gameServer) {
            gameServer.run = true;
            gameServer.getRandomSpawn = gameServer.getRandomPosition;
        }
    }, {
        key: 'onTick',
        value: function onTick(gameServer) {
            if (this.tickMother >= this.motherUpdateInterval) {
                this.updateMotherCells(gameServer);
                this.tickMother = 0;
            } else {
                this.tickMother++;
            }
            if (this.tickMotherS >= this.motherSpawnInterval) {
                this.spawnMotherCell(gameServer);
                this.tickMotherS = 0;
            } else {
                this.tickMotherS++;
            }
        }
    }, {
        key: 'onChange',
        value: function onChange(gameServer) {
            for (var i in this.nodesMother) {
                gameServer.removeNode(this.nodesMother[i]);
            }
            _entityIndex.Virus.prototype.feed = VirusFeed;
            gameServer.getRandomSpawn = require('../GameServer').prototype.getRandomSpawn;
        }
    }]);

    return Experimental;
})(_FFA3['default']);

exports['default'] = Experimental;

var MotherCell = (function (_Cell) {
    _inherits(MotherCell, _Cell);

    function MotherCell(nodeId, owner, position, mass, gameServer) {
        _classCallCheck(this, MotherCell);

        _get(Object.getPrototypeOf(MotherCell.prototype), 'constructor', this).call(this, nodeId, owner, position, mass, gameServer);
        this.cellType = 2;
        this.color = { r: 205, g: 85, b: 100 };
        this.spiked = 1;
    }

    _createClass(MotherCell, [{
        key: 'getEatingRange',
        value: function getEatingRange() {
            return this.getSize() * .5;
        }
    }, {
        key: 'update',
        value: function update(gameServer) {
            this.mass += .25;
            var maxFood = 10;
            var i = 0;
            while (this.mass > gameServer.gameMode.motherCellMass && i < maxFood) {
                if (gameServer.currentFood < gameServer.config.foodMaxAmount) {
                    this.spawnFood(gameServer);
                }
                this.mass--;
                i++;
            }
        }
    }, {
        key: 'checkEat',
        value: function checkEat(gameServer) {
            var safeMass = this.mass * .9;
            var r = this.getSize();
            for (var i in gameServer.nodesPlayer) {
                var check = gameServer.nodesPlayer[i];
                if (check.mass > safeMass) {
                    continue;
                }
                var len = r - check.getSize() / 2 >> 0;
                if (this.abs(this.position.x - check.position.x) < len && this.abs(this.position.y - check.position.y) < len) {
                    var xs = Math.pow(check.position.x - this.position.x, 2);
                    var ys = Math.pow(check.position.y - this.position.y, 2);
                    var dist = Math.sqrt(xs + ys);
                    if (r > dist) {
                        gameServer.removeNode(check);
                        this.mass += check.mass;
                    }
                }
            }
            for (var i in gameServer.movingNodes) {
                var check = gameServer.movingNodes[i];
                if (check.getType() == 1 || check.mass > safeMass) {
                    continue;
                }
                var len = r >> 0;
                if (this.abs(this.position.x - check.position.x) < len && this.abs(this.position.y - check.position.y) < len) {
                    gameServer.removeNode(check);
                    this.mass += check.mass;
                }
            }
        }
    }, {
        key: 'abs',
        value: function abs(n) {
            return n < 0 ? -n : n;
        }
    }, {
        key: 'spawnFood',
        value: function spawnFood(gameServer) {
            var angle = Math.random() * 6.28;
            var r = this.getSize();
            var pos = {
                x: this.position.x + r * Math.sin(angle),
                y: this.position.y + r * Math.cos(angle)
            };
            var f = new _entityIndex.Food(gameServer.getNextNodeId(), null, pos, gameServer.config.foodMass, null);
            f.setColor(gameServer.getRandomColor());
            gameServer.addNode(f);
            gameServer.currentFood++;
            f.angle = angle;
            var dist = Math.random() * 10 + 22;
            f.setMoveEngineData(dist, 15, null);
            gameServer.setAsMovingNode(f);
        }
    }, {
        key: 'onAdd',
        value: function onAdd(gameServer) {
            gameServer.gameMode.nodesMother.push(this);
        }
    }, {
        key: 'onRemove',
        value: function onRemove(gameServer) {
            var index = gameServer.gameMode.nodesMother.indexOf(this);
            if (index != -1) {
                gameServer.gameMode.nodesMother.splice(index, 1);
            }
        }
    }, {
        key: 'visibleCheck',
        value: function visibleCheck(box, centerPos) {
            var cellSize = this.getSize();
            var lenX = cellSize + box.width >> 0;
            var lenY = cellSize + box.height >> 0;
            return this.abs(this.position.x - centerPos.x) < lenX && this.abs(this.position.y - centerPos.y) < lenY;
        }
    }]);

    return MotherCell;
})(_entityIndex.Cell);

var ExperimentalVirus = (function (_Virus) {
    _inherits(ExperimentalVirus, _Virus);

    function ExperimentalVirus(nodeId, owner, position, mass, gameServer) {
        _classCallCheck(this, ExperimentalVirus);

        _get(Object.getPrototypeOf(ExperimentalVirus.prototype), 'constructor', this).call(this, nodeId, owner, position, mass, gameServer);
    }

    _createClass(ExperimentalVirus, [{
        key: 'feed',
        value: function feed(feeder, gameServer) {
            gameServer.removeNode(feeder);
            this.setAngle(feeder.getAngle());
            this.moveEngineTicks = 5;
            this.moveEngineSpeed = 30;
            var index = gameServer.movingNodes.indexOf(this);
            if (index == -1) {
                gameServer.movingNodes.push(this);
            }
        }
    }]);

    return ExperimentalVirus;
})(_entityIndex.Virus);

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,