"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _packetIndex = require('./packet/index');

var Packet = _interopRequireWildcard(_packetIndex);

var PlayerTracker = (function () {
    function PlayerTracker(gameServer, socket) {
        _classCallCheck(this, PlayerTracker);

        this.pID = -1;
        this.disconnect = -1;
        this.name = "";
        this.gameServer = gameServer;
        this.socket = socket;
        this.nodeAdditionQueue = [];
        this.nodeDestroyQueue = [];
        this.visibleNodes = [];
        this.cells = [];
        this.score = 0;
        this.mouse = { x: 0, y: 0 };
        this.mouseCells = [];
        this.tickLeaderboard = 0;
        this.tickViewBox = 0;
        this.team = 0;
        this.spectate = false;
        this.spectatedPlayer = -1;
        this.sightRangeX = 0;
        this.sightRangeY = 0;
        this.centerPos = { x: 3000, y: 3000 };
        this.viewBox = {
            topY: 0,
            bottomY: 0,
            leftX: 0,
            rightX: 0,
            width: 0,
            height: 0
        };
        if (gameServer) {
            this.pID = gameServer.getNewPlayerID();
            gameServer.gameMode.onPlayerInit(this);
        }
    }

    _createClass(PlayerTracker, [{
        key: "setName",
        value: function setName(name) {
            this.name = name;
        }
    }, {
        key: "getName",
        value: function getName() {
            return this.name;
        }
    }, {
        key: "getScore",
        value: function getScore(reCalcScore) {
            if (reCalcScore) {
                var s = 0;
                for (var i = 0; i < this.cells.length; i++) {
                    s += this.cells[i].mass;
                    this.score = s;
                }
            }
            return this.score >> 0;
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            this.color.r = color.r;
            this.color.b = color.b;
            this.color.g = color.g;
        }
    }, {
        key: "getTeam",
        value: function getTeam() {
            return this.team;
        }
    }, {
        key: "update",
        value: function update() {
            if (this.socket.packetHandler.pressSpace) {
                this.gameServer.gameMode.pressSpace(this.gameServer, this);
                this.socket.packetHandler.pressSpace = false;
            }
            if (this.socket.packetHandler.pressW) {
                this.gameServer.gameMode.pressW(this.gameServer, this);
                this.socket.packetHandler.pressW = false;
            }
            if (this.socket.packetHandler.pressQ) {
                this.gameServer.gameMode.pressQ(this.gameServer, this);
                this.socket.packetHandler.pressQ = false;
            }
            var updateNodes = [];
            var d = 0;
            while (d < this.nodeDestroyQueue.length) {
                var index = this.visibleNodes.indexOf(this.nodeDestroyQueue[d]);
                if (index > -1) {
                    this.visibleNodes.splice(index, 1);
                    d++;
                } else {
                    this.nodeDestroyQueue.splice(d, 1);
                }
            }
            var nonVisibleNodes = [];
            if (this.tickViewBox <= 0) {
                var newVisible = this.calcViewBox();
                for (var i = 0; i < this.visibleNodes.length; i++) {
                    var index = newVisible.indexOf(this.visibleNodes[i]);
                    if (index == -1) {
                        nonVisibleNodes.push(this.visibleNodes[i]);
                    }
                }
                for (var i = 0; i < newVisible.length; i++) {
                    var index = this.visibleNodes.indexOf(newVisible[i]);
                    if (index == -1) {
                        updateNodes.push(newVisible[i]);
                    }
                }
                this.visibleNodes = newVisible;
                this.tickViewBox = 2;
            } else {
                this.tickViewBox--;
                for (var i = 0; i < this.nodeAdditionQueue.length; i++) {
                    var node = this.nodeAdditionQueue[i];
                    this.visibleNodes.push(node);
                    updateNodes.push(node);
                }
            }
            for (var i = 0; i < this.visibleNodes.length; i++) {
                var node = this.visibleNodes[i];
                if (node.sendUpdate()) {
                    updateNodes.push(node);
                }
            }
            this.socket.sendPacket(new Packet.UpdateNodes(this.nodeDestroyQueue, updateNodes, nonVisibleNodes));
            this.nodeDestroyQueue = [];
            this.nodeAdditionQueue = [];
            if (this.tickLeaderboard <= 0) {
                this.socket.sendPacket(this.gameServer.lb_packet);
                this.tickLeaderboard = 10;
            } else {
                this.tickLeaderboard--;
            }
            if (this.disconnect > -1) {
                this.disconnect--;
                if (this.disconnect == -1) {
                    var len = this.cells.length;
                    for (var i = 0; i < len; i++) {
                        var cell = this.socket.playerTracker.cells[0];
                        if (!cell) {
                            continue;
                        }
                        this.gameServer.removeNode(cell);
                    }
                    var index = this.gameServer.clients.indexOf(this.socket);
                    if (index != -1) {
                        this.gameServer.clients.splice(index, 1);
                    }
                }
            }
        }
    }, {
        key: "updateSightRange",
        value: function updateSightRange() {
            var totalSize = 1.0;
            var len = this.cells.length;
            for (var i = 0; i < len; i++) {
                if (!this.cells[i]) {
                    continue;
                }
                totalSize += this.cells[i].getSize();
            }
            var factor = Math.pow(Math.min(64.0 / totalSize, 1), 0.4);
            this.sightRangeX = this.gameServer.config.serverViewBaseX / factor;
            this.sightRangeY = this.gameServer.config.serverViewBaseY / factor;
        }
    }, {
        key: "updateCenter",
        value: function updateCenter() {
            var len = this.cells.length;
            if (len <= 0) {
                return;
            }
            var X = 0;
            var Y = 0;
            for (var i = 0; i < len; i++) {
                if (!this.cells[i]) {
                    continue;
                }
                X += this.cells[i].position.x;
                Y += this.cells[i].position.y;
            }
            this.centerPos.x = X / len;
            this.centerPos.y = Y / len;
        }
    }, {
        key: "calcViewBox",
        value: function calcViewBox() {
            if (this.spectate) {
                return this.getSpectateNodes();
            }
            this.updateSightRange();
            this.updateCenter();
            this.viewBox.topY = this.centerPos.y - this.sightRangeY;
            this.viewBox.bottomY = this.centerPos.y + this.sightRangeY;
            this.viewBox.leftX = this.centerPos.x - this.sightRangeX;
            this.viewBox.rightX = this.centerPos.x + this.sightRangeX;
            this.viewBox.width = this.sightRangeX;
            this.viewBox.height = this.sightRangeY;
            var newVisible = [];
            for (var i = 0; i < this.gameServer.nodes.length; i++) {
                var node = this.gameServer.nodes[i];
                if (!node) {
                    continue;
                }
                if (node.visibleCheck(this.viewBox, this.centerPos)) {
                    newVisible.push(node);
                }
            }
            return newVisible;
        }
    }, {
        key: "getSpectateNodes",
        value: function getSpectateNodes() {
            var specPlayer;
            if (this.gameServer.getMode().specByLeaderboard) {
                this.spectatedPlayer = Math.min(this.gameServer.leaderboard.length - 1, this.spectatedPlayer);
                specPlayer = this.spectatedPlayer == -1 ? null : this.gameServer.leaderboard[this.spectatedPlayer];
            } else {
                this.spectatedPlayer = Math.min(this.gameServer.clients.length - 1, this.spectatedPlayer);
                specPlayer = this.spectatedPlayer == -1 ? null : this.gameServer.clients[this.spectatedPlayer].playerTracker;
            }
            if (specPlayer) {
                if (specPlayer.cells.length == 0) {
                    this.gameServer.switchSpectator(this);
                    return [];
                }
                var specZoom = Math.sqrt(100 * specPlayer.score);
                specZoom = Math.pow(Math.min(40.5 / specZoom, 1.0), 0.4) * 0.6;
                this.socket.sendPacket(new Packet.UpdatePosition(specPlayer.centerPos.x, specPlayer.centerPos.y, specZoom));
                return specPlayer.visibleNodes.slice(0, specPlayer.visibleNodes.length);
            } else {
                return [];
            }
        }
    }]);

    return PlayerTracker;
})();

exports["default"] = PlayerTracker;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;base64,