"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _packetIndex = require('./packet/index');

var Packet = _interopRequireWildcard(_packetIndex);

function stobuf(buf) {
    var length = buf.length;
    var arrayBuf = new ArrayBuffer(length);
    var view = new Uint8Array(arrayBuf);
    for (var i = 0; i < length; i++) {
        view[i] = buf[i];
    }
    return view.buffer;
}

var PacketHandler = (function () {
    function PacketHandler(gameServer, socket) {
        _classCallCheck(this, PacketHandler);

        this.gameServer = gameServer;
        this.socket = socket;
        this.protocol = 0;
        this.pressQ = false;
        this.pressW = false;
        this.pressSpace = false;
    }

    _createClass(PacketHandler, [{
        key: "handleMessage",
        value: function handleMessage(message) {
            if (message.length == 0) {
                return;
            }
            var buffer = stobuf(message);
            var view = new DataView(buffer);
            var packetId = view.getUint8(0);
            switch (packetId) {
                case 0:
                    if ((view.byteLength + 1) % 2 == 1) {
                        break;
                    }
                    var nick = "";
                    var maxLen = this.gameServer.config.playerMaxNickLength * 2;
                    for (var i = 1; i < view.byteLength && i <= maxLen; i += 2) {
                        var charCode = view.getUint16(i, true);
                        if (charCode == 0) {
                            break;
                        }
                        nick += String.fromCharCode(charCode);
                    }
                    this.setNickname(nick);
                    break;
                case 1:
                    if (this.socket.playerTracker.cells.length <= 0) {
                        this.gameServer.switchSpectator(this.socket.playerTracker);
                        this.socket.playerTracker.spectate = true;
                    }
                    break;
                case 16:
                    if (view.byteLength == 13) {
                        var client = this.socket.playerTracker;
                        client.mouse.x = view.getInt32(1, true);
                        client.mouse.y = view.getInt32(5, true);
                    }
                    break;
                case 17:
                    this.pressSpace = true;
                    break;
                case 18:
                    this.pressQ = true;
                    break;
                case 19:
                    break;
                case 21:
                    this.pressW = true;
                    break;
                case 255:
                    if (view.byteLength == 5) {
                        this.protocol = view.getUint32(1, true);
                        var c = this.gameServer.config;
                        this.socket.sendPacket(new Packet.SetBorder(c.borderLeft, c.borderRight, c.borderTop, c.borderBottom));
                    }
                    break;
                default:
                    break;
            }
        }
    }, {
        key: "setNickname",
        value: function setNickname(newNick) {
            var client = this.socket.playerTracker;
            if (client.cells.length < 1) {
                client.setName(newNick);
                this.gameServer.gameMode.onPlayerSpawn(this.gameServer, client);
                client.spectate = false;
            }
        }
    }]);

    return PacketHandler;
})();

exports["default"] = PacketHandler;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;base64,