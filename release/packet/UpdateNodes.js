"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UpdateNodes = (function () {
    function UpdateNodes(destroyQueue, nodes, nonVisibleNodes) {
        _classCallCheck(this, UpdateNodes);

        this.destroyQueue = destroyQueue;
        this.nodes = nodes;
        this.nonVisibleNodes = nonVisibleNodes;
    }

    _createClass(UpdateNodes, [{
        key: "build",
        value: function build() {
            var nodesLength = 0;
            for (var i = 0; i < this.nodes.length; i++) {
                var node = this.nodes[i];
                if (typeof node == "undefined") {
                    continue;
                }
                nodesLength = nodesLength + 20 + node.getName().length * 2;
            }
            var buf = new ArrayBuffer(3 + this.destroyQueue.length * 12 + this.nonVisibleNodes.length * 4 + nodesLength + 8);
            var view = new DataView(buf);
            view.setUint8(0, 16);
            view.setUint16(1, this.destroyQueue.length, true);
            var offset = 3;
            for (var i = 0; i < this.destroyQueue.length; i++) {
                var node = this.destroyQueue[i];
                if (!node) {
                    continue;
                }
                var killer = 0;
                if (node.getKiller()) {
                    killer = node.getKiller().nodeId;
                }
                view.setUint32(offset, killer, true);
                view.setUint32(offset + 4, node.nodeId, true);
                offset += 8;
            }
            for (var i = 0; i < this.nodes.length; i++) {
                var node = this.nodes[i];
                if (typeof node == "undefined") {
                    continue;
                }
                view.setUint32(offset, node.nodeId, true);
                view.setInt32(offset + 4, node.position.x, true);
                view.setInt32(offset + 8, node.position.y, true);
                view.setUint16(offset + 12, node.getSize(), true);
                view.setUint8(offset + 14, node.color.r);
                view.setUint8(offset + 15, node.color.g);
                view.setUint8(offset + 16, node.color.b);
                view.setUint8(offset + 17, node.spiked);
                offset += 18;
                var name = node.getName();
                if (name) {
                    for (var j = 0; j < name.length; j++) {
                        var c = name.charCodeAt(j);
                        if (c) {
                            view.setUint16(offset, c, true);
                        }
                        offset += 2;
                    }
                }
                view.setUint16(offset, 0, true);
                offset += 2;
            }
            var len = this.nonVisibleNodes.length + this.destroyQueue.length;
            view.setUint32(offset, 0, true);
            view.setUint32(offset + 4, len, true);
            offset += 8;
            for (var i = 0; i < this.destroyQueue.length; i++) {
                var node = this.destroyQueue[i];
                if (!node) {
                    continue;
                }
                view.setUint32(offset, node.nodeId, true);
                offset += 4;
            }
            for (var i = 0; i < this.nonVisibleNodes.length; i++) {
                var node = this.nonVisibleNodes[i];
                if (!node) {
                    continue;
                }
                view.setUint32(offset, node.nodeId, true);
                offset += 4;
            }
            return buf;
        }
    }]);

    return UpdateNodes;
})();

exports["default"] = UpdateNodes;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;base64,