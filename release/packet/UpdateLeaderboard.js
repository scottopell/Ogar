"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UpdateLeaderboard = (function () {
    function UpdateLeaderboard(leaderboard, packetLB) {
        _classCallCheck(this, UpdateLeaderboard);

        this.leaderboard = leaderboard;
        this.packetLB = packetLB;
    }

    _createClass(UpdateLeaderboard, [{
        key: "build",
        value: function build() {
            var lb = this.leaderboard;
            var bufferSize = 5;
            var validElements = 0;
            switch (this.packetLB) {
                case 48:
                    for (var i = 0; i < lb.length; i++) {
                        if (typeof lb[i] == "undefined") {
                            continue;
                        }
                        var item = lb[i];
                        bufferSize += 4;
                        bufferSize += item.length * 2;
                        bufferSize += 2;
                        validElements++;
                    }
                    var buf = new ArrayBuffer(bufferSize);
                    var view = new DataView(buf);
                    view.setUint8(0, 49);
                    view.setUint32(1, validElements, true);
                    var offset = 5;
                    for (var i = 0; i < lb.length; i++) {
                        if (typeof lb[i] == "undefined") {
                            continue;
                        }
                        var item = lb[i];
                        view.setUint32(offset, 1, true);
                        offset += 4;
                        for (var j = 0; j < item.length; j++) {
                            view.setUint16(offset, item.charCodeAt(j), true);
                            offset += 2;
                        }
                        view.setUint16(offset, 0, true);
                        offset += 2;
                    }
                    return buf;
                    break;
                case 49:
                    for (var i = 0; i < lb.length; i++) {
                        if (typeof lb[i] == "undefined") {
                            continue;
                        }
                        var item = lb[i];
                        bufferSize += 4;
                        bufferSize += item.getName() ? item.getName().length * 2 : 0;
                        bufferSize += 2;
                        validElements++;
                    }
                    var buf = new ArrayBuffer(bufferSize);
                    var view = new DataView(buf);
                    view.setUint8(0, this.packetLB);
                    view.setUint32(1, validElements, true);
                    var offset = 5;
                    for (var i = 0; i < lb.length; i++) {
                        if (typeof lb[i] == "undefined") {
                            continue;
                        }
                        var item = lb[i];
                        var nodeID = 0;
                        if (item.cells[0]) {
                            nodeID = item.cells[0].nodeId;
                        }
                        view.setUint32(offset, nodeID, true);
                        offset += 4;
                        var name = item.getName();
                        if (name) {
                            for (var j = 0; j < name.length; j++) {
                                view.setUint16(offset, name.charCodeAt(j), true);
                                offset += 2;
                            }
                        }
                        view.setUint16(offset, 0, true);
                        offset += 2;
                    }
                    return buf;
                case 50:
                    validElements = lb.length;
                    bufferSize += validElements * 4;
                    var buf = new ArrayBuffer(bufferSize);
                    var view = new DataView(buf);
                    view.setUint8(0, this.packetLB);
                    view.setUint32(1, validElements, true);
                    var offset = 5;
                    for (var i = 0; i < validElements; i++) {
                        view.setFloat32(offset, lb[i], true);
                        offset += 4;
                    }
                    return buf;
                default:
                    break;
            }
        }
    }]);

    return UpdateLeaderboard;
})();

exports["default"] = UpdateLeaderboard;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;base64,